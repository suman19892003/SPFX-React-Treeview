import * as React from 'react';
import style from './Landing.module.scss';
import multistyle from './Multiple.module.scss';
import styles from "./GlobalClaimsCenterIdForm.module.scss";
import { ILandingProps } from './ILmLandingProps';
import { escape, find } from "@microsoft/sp-lodash-subset";

import { sp } from "@pnp/sp/presets/all";

import TreeView from "@material-ui/lab/TreeView";
import TreeItem from "@material-ui/lab/TreeItem";
import ExpandMoreIcon from "@material-ui/icons/ExpandMore";
import ChevronRightIcon from "@material-ui/icons/ChevronRight";

export default class TreeViewNav extends React.Component<any, any> {

  constructor(props){
    super(props);
    this.state = {
      dataColl:[],
      treeData:[]
    };
  }


  async componentDidMount(){
    await this.getNavData("TreeViewDoc").then(()=>{
        //Remove Form Item from an array as its loaded by default when getting items from Library

        var array = [...this.state.treeData];
        for(var i = 0; i <= array.length - 1; i++){
            for(var k = 0; k <= array[i].data.length - 1; k++){
            debugger
                if(array[i].data[k].text == "Forms"){
                    array[i].data.splice(k--,1);
                }
            }
        }
        this.setState({treeData: array});
        this.setState({Status: "Updated"});
    })
  }

    getNavData=async (libraryName)=>{
    let treeData=[];
    let obj1={text:libraryName,data:[]}
    treeData.push(obj1);

    
    await sp.web.folders.getByName(libraryName).folders.get().then(async (data)=>{ 
         for(var i1=0; i1 < data.length; i1++){
            let obj2={text:data[i1].Name,data:[],url:""}
            treeData[0].data.push(obj2); 
            let FolderName2= data[i1].Name
            const ierte= await this.setSubFolder(libraryName,FolderName2,i1,treeData).then(async data1=>{
            })      
        }    
    })
    //New Code
    let URL="/sites/SmartekClaimsform_dev/"+libraryName
    await sp.web.getFolderByServerRelativeUrl(URL).files.get().then(async files => {
        for (var i = 0; i < files.length; i++) {
            var _ServerRelativeUrl = files[i].ServerRelativeUrl;
            let objfile1={text:files[i].Name,data:[],url:_ServerRelativeUrl}
            treeData[0].data.push(objfile1);
        }
        this.setState({treeData:treeData})
    })
  }

   public setSubFolder=async(libraryName,FolderName2,i1,treeData)=>{
    
    await sp.web.folders.getByName(libraryName).folders.getByName(FolderName2).folders.get().then(async (data1)=>{
        for(var i2=0; i2 < data1.length; i2++){
            let obj3={text:data1[i2].Name,data:[],url:""}
            treeData[0].data[i1].data.push(obj3);  
            //console.log(data[i1].Name + " - " + data[i1].ServerRelativeUrl);
            let FolderName3= data1[i2].Name
            const ierte= await this.setSubFolder2(libraryName,FolderName2,FolderName3,i1,i2,treeData)
        }
    })
    let URL="/sites/subsitename/"+libraryName+"/"+FolderName2
    await sp.web.getFolderByServerRelativeUrl(URL).files.get().then(async files => {
        for (var i = 0; i < files.length; i++) {
            var _ServerRelativeUrl = files[i].ServerRelativeUrl;
            let objfile1={text:files[i].Name,data:[],url:_ServerRelativeUrl}
            //treeData[0].data.push(objfile1);
            treeData[0].data[i1].data.push(objfile1);
        }
    })
  }

  public setSubFolder2=async(libraryName,FolderName2,FolderName3,i1,i2,treeData)=>{
    
    let URL="/sites/SmartekClaimsform_dev/"+libraryName+"/"+FolderName2 + "/"+FolderName3
    await sp.web.getFolderByServerRelativeUrl(URL).files.get().then(async files => {
        for (var i = 0; i < files.length; i++) {
            var _ServerRelativeUrl = files[i].ServerRelativeUrl;
            let obj4={text:files[i].Name,data:[],url:_ServerRelativeUrl}
            treeData[0].data[i1].data[i2].data.push(obj4);
            sp.web.getFileByServerRelativeUrl(_ServerRelativeUrl).getItem().then(item=> {
                console.log(item);
            });
        }
    });
  }

  public render(): React.ReactElement<any> {

    const renderLabel = item => (
        <span
          onClick={event => {
              debugger;
              if(item.url){
                alert(item.url)
              }
              else{
                //alert(item.text)
              }
            // if you want after click do expand/collapse comment this two line
            event.stopPropagation();
            event.preventDefault();
          }}
        >
          {item.text}
        </span>
      );

    return(<div>
        <h2>Tree View Structure of Files and Folder from SP Doc Library</h2>
        {this.state.treeData.length > 0 && 
            <TreeView
                defaultCollapseIcon={<ExpandMoreIcon />}
                defaultExpanded={["root"]}
                defaultExpandIcon={<ChevronRightIcon />}
                >
                {this.state.treeData.map((item1,index1)=>{
                    return(
                        <TreeItem nodeId={item1.text+index1} label={renderLabel(item1)}>
                        {item1.data.length > 0 && 
                        item1.data.map((item2,index2)=>{
                            return(
                                <TreeItem nodeId={item2.text+index2} label={renderLabel(item2)}>
                                
                                {item2.data.length > 0 && 
                                    item2.data.map((item3,index3)=>{
                                        return(
                                            <TreeItem nodeId={item3.text+index3} label={renderLabel(item3)}>
                                            {item3.data.length > 0 && 
                                                item3.data.map((item4,index4)=>{
                                                    return(
                                                        <TreeItem nodeId={item4.text+index4} label={renderLabel(item4)}>
                                                
                                                        </TreeItem>
                                                    )
                                                })             
                                            }
                                            </TreeItem>
                                        )
                                    })             
                                }

                                </TreeItem>
                            )
                        })             
                        }
                        </TreeItem>
                    )
                })}           
            </TreeView>
        }
        </div>)
  }
}
